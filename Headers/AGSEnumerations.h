/*
 COPYRIGHT 2011 ESRI
 
 TRADE SECRETS: ESRI PROPRIETARY AND CONFIDENTIAL
 Unpublished material - all rights reserved under the
 Copyright Laws of the United States and applicable international
 laws, treaties, and conventions.
 
 For additional information, contact:
 Environmental Systems Research Institute, Inc.
 Attn: Contracts and Legal Services Department
 380 New York Street
 Redlands, California, 92373
 USA
 
 email: contracts@esri.com
 */

/** @file AGSEnumerations.h */ 

/** Possible spatial relationships.
 @since 1.8
 */
typedef enum {
    AGSSpatialRelationshipIntersects = 0,		/*!<  */
    AGSSpatialRelationshipContains,				/*!<  */
    AGSSpatialRelationshipCrosses,				/*!<  */
    AGSSpatialRelationshipEnvelopeIntersects,	/*!<  */
    AGSSpatialRelationshipIndexIntersects,		/*!<  */
    AGSSpatialRelationshipOverlaps,				/*!<  */
    AGSSpatialRelationshipTouches,				/*!<  */
    AGSSpatialRelationshipWithin,				/*!<  */
	AGSSpatialRelationshipRelation				/*!<  */
} AGSSpatialRelationship;

/** Specifies the way of timeOfDay property is used.
 @since 2.3
 @avail{10.1}
 */
typedef enum {
    AGSNATimeOfDayUseAsStartTime = 0, /*!<  Use as the start time.*/
    AGSNATimeOfDayUseAsEndTime        /*!<  Use as the end time.*/
} AGSNATimeOfDayUse;

/** Defines content, verbosity of returned directions.
 @since 2.3
 @avail{10.1}
 */
typedef enum {
    AGSNADirectionsOutputTypeStandard = 0,		/*!< Standard directions output – direction text instructions, geometry, time, length, ETA. Does not include events, new types*/
	AGSNADirectionsOutputTypeComplete,      	/*!< Directions output that includes all directions properties.*/
    AGSNADirectionsOutputTypeCompleteNoEvents,  /*!< Directions output that includes all directions properties except events.*/
    AGSNADirectionsOutputTypeInstructionsOnly,  /*!< Directions output that includes text instructions, time, length and ETA. Does not include geometry.*/
    AGSNADirectionsOutputTypeSummaryOnly        /*!< Directions output that contains only summary (time and length). Detailed text instructions and geometry are not provided.*/
} AGSNADirectionsOutputType;

/** Specifies the type of lines generated by the network analyst solvers.
 @since 1.8
 */
typedef enum {
	AGSNAOutputLineNone = 0,				/*!< No polylines are generated. */
	AGSNAOutputLineStraight,				/*!< Straight polylines between the two endpoints are generated. */
	AGSNAOutputLineTrueShape,				/*!< Polylines based on the true network feature geometry are generated. */
    AGSNAOutputLineTrueShapeWithMeasure     /*!< Polylines based on the true network feature geometry are generated, and measures are added whenever possible. */
} AGSNAOutputLine;


/** Constants representing how U-Turns are handled
 @since 1.8
 */
typedef enum {
	AGSNAUTurnAllowBacktrack = 0,			/*!<  Allow U-turns anywhere.*/
	AGSNAUTurnAtDeadEndsOnly,				/*!<  Allow U-turns only at dead ends only.*/
	AGSNAUTurnNoBacktrack,					/*!<  Don't allow U-turns anywhere.*/
	AGSNAUTurnAtDeadEndsAndIntersections,	/*!<  Allow U-turns at dead ends and intersections only. */
} AGSNAUTurn;

/** Constants representing directions length units for the @c AGSRouteTask.
 @since 1.8
 */
typedef enum {
	AGSNAUnitCentimeters = 0,	/*!< */
	AGSNAUnitDays,				/*!< */
	AGSNAUnitDecimalDegrees,	/*!< */
	AGSNAUnitDecimeters,		/*!< */
	AGSNAUnitFeet,				/*!< */
	AGSNAUnitHours,				/*!< */
	AGSNAUnitInches,			/*!< */
	AGSNAUnitKilometers,		/*!< */
	AGSNAUnitMeters,			/*!< */
	AGSNAUnitMiles,				/*!< */
	AGSNAUnitMillimeters,		/*!< */
	AGSNAUnitMinutes,			/*!< */
	AGSNAUnitNauticalMiles,		/*!< */
	AGSNAUnitPoints,			/*!< */
	AGSNAUnitSeconds,			/*!< */
	AGSNAUnitUnknown,			/*!< */
	AGSNAUnitYards,				/*!< */
} AGSNAUnit; 

/** Constant representing the type of network layer.
 @since 1.8
 */
typedef enum {
	AGSNALayerTypeRoute = 0,			/*!<  Route Layer. */
	AGSNALayerTypeServiceArea,			/*!<  Service Area Layer. */
	AGSNALayerTypeClosestFacility,		/*!<  Closest Facility Layer. */
} AGSNALayerType;

/** Constants representing how the geometry is returned.
 @since 1.8
 */
typedef enum {
	AGSNATravelDirectionFromFacility = 0,	/*!< Tavel to the facility. */
	AGSNATravelDirectionToFacility,			/*!< Travel from the facility. */
} AGSNATravelDirection;

/** Constants representing maneuver types for a direction.
 @since 1.8
 */
typedef enum {
	AGSNADirectionsManeuverUnknown = 0,		/*!< Unknown */
	AGSNADirectionsManeuverStop,			/*!< Arrive At Stop. */
	AGSNADirectionsManeuverStraight,		/*!< Go straight. */
	AGSNADirectionsManeuverBearLeft,		/*!< Bear left.*/
	AGSNADirectionsManeuverBearRight,		/*!< Bear righty. */
	AGSNADirectionsManeuverTurnLeft,		/*!< Turn left.*/
	AGSNADirectionsManeuverTurnRight,		/*!< Turn right. */
	AGSNADirectionsManeuverSharpLeft,		/*!< Make sharp left. */
	AGSNADirectionsManeuverSharpRight,		/*!< Make sharp right. */
	AGSNADirectionsManeuverUTurn,			/*!< Make a U-turn. */
	AGSNADirectionsManeuverFerry,			/*!< Take ferry. */
	AGSNADirectionsManeuverRoundabout,		/*!< Take roundabout. */
	AGSNADirectionsManeuverHighwayMerge,	/*!< Merge to highway. */
	AGSNADirectionsManeuverHighwayExit,		/*!< Exit highway. */
	AGSNADirectionsManeuverHighwayChange,	/*!< Go on another highway. */
    AGSNADirectionsManeuverForkCenter,		/*!< At fork keep center. */
	AGSNADirectionsManeuverForkLeft,		/*!< At fork keep left. */
	AGSNADirectionsManeuverForkRight,		/*!< At fork keep right. */
	AGSNADirectionsManeuverDepart,			/*!< Depart stop. */
	AGSNADirectionsManeuverTripItem,		/*!< Trip planning item. */
	AGSNADirectionsManeuverEndOfFerry,		/*!< End of ferry. */
    AGSNADirectionsManeuverRampRight,       /*!< Ramp right. */
    AGSNADirectionsManeuverRampLeft,        /*!< Ramp left. */
    AGSNADirectionsManeuverTurnLeftRight,	/*!< Turn left and immediately turn right. */
    AGSNADirectionsManeuverTurnRightLeft,	/*!< Turn right and immediately turn left. */
	AGSNADirectionsManeuverTurnRightRight,	/*!< Turn right and immediately turn right. */
    AGSNADirectionsManeuverTurnLeftLeft,	/*!< Turn left and immediately turn left. */
    AGSNADirectionsManeuverPedestrianRamp,  /*!< Pedestrian ramp. */
    AGSNADirectionsManeuverElevator,        /*!< Elevator. */
    AGSNADirectionsManeuverEscalator,       /*!< Escalator. */
    AGSNADirectionsManeuverStairs,          /*!< Stairs. */
    AGSNADirectionsManeuverDoorPassage,     /*!< Door passage. */
} AGSNADirectionsManeuver;

/** Types of direction strings. These are associated with the more detailed
 direction info passed back from a route solving operation.
 @since 2.3
 @avail{10.1}
 */
typedef enum {
    AGSNADirectionsStringGeneral = 0,           /*!< General directions string type.*/
    AGSNADirectionsStringDepart,                /*!< Depart directions string type.*/
    AGSNADirectionsStringArrive,                /*!< Arrive directions string type.*/
    AGSNADirectionsStringLength,                /*!< Length directions string type.*/
    AGSNADirectionsStringTime,                  /*!< Time directions string type.*/
    AGSNADirectionsStringSummary,               /*!< Time directions string type.*/
    AGSNADirectionsStringTimeWindow,            /*!< Time Window directions string type.*/
    AGSNADirectionsStringViolationTime,         /*!< Violation Time directions string type.*/
    AGSNADirectionsStringWaitTime,              /*!< Wait Time directions string type.*/
    AGSNADirectionsStringServiceTime,           /*!< Service Time directions string type.*/
    AGSNADirectionsStringEstimatedArrivalTime,  /*!< Estimated Arrival Time directions string type.*/
    AGSNADirectionsStringCumulativeLength,      /*!< Cumulative Length directions string type.*/
    AGSNADirectionsStringStreetName,            /*!< Street name directions string type.*/
    AGSNADirectionsStringAltName,               /*!< Alternate street name directions string type.*/
    AGSNADirectionsStringBranch,                /*!< Sign branch information directions string type.*/
    AGSNADirectionsStringToward,                /*!< Sign toward information directions string type.*/
    AGSNADirectionsStringCrossStreet,           /*!< Cross street name directions string type.*/
    AGSNADirectionsStringExit,                  /*!< Sign exit number directions string type.*/
} AGSNADirectionsStringType;

/** Constants representing the network analyst message type.
 @since 1.8
 */
typedef enum {
	AGSNAMessageTypeAbort = 0,					/*!<  */
	AGSNAMessageTypeEmpty = 1,					/*!<  */
	AGSNAMessageTypeError = 2,					/*!<  */
	AGSNAMessageTypeInformative = 3,			/*!<  */
	AGSNAMessageTypeProcessDefinition = 50,		/*!<  */
	AGSNAMessageTypeProcessStart = 100,			/*!<  */
	AGSNAMessageTypeProcessStop = 101,			/*!<  */
	AGSNAMessageTypeWarning = 200,				/*!<  */
} AGSNAMessageType;

/** Contstants representing how the geometry is returned.
 @since 1.8
 */
typedef enum {
	AGSNAOutputPolygonDetailed = 0,			/*!< No polygons are generated. */	
	AGSNAOutputPolygonNone,					/*!< Simplified polygons are generated. */
	AGSNAOutputPolygonSimplified			/*!< Detailed polygons are generated. */
} AGSNAOutputPolygon;

//@todo doc/move
typedef enum {
    AGSConfFileTypeCDI = 0,               /*!<  */
    AGSConfFileTypeXML,                   /*!<  */
} AGSConfigFileType;

// @todo doc
typedef enum {
    AGSMGRSConversionModeNewStyle = 0,
} AGSMGRSConversionMode;

/** Constants representing error codes.
 @since 2.1
 */
typedef enum {
	AGSErrorCodeOperationNotSupported = 10000,          /*!<  */
    AGSErrorCodeNoDataTile = 10001,                     /*!<  */
    AGSErrorCodeSpatialReferenceNotSupported = 10002,   /*!<  */
    AGSErrorCodeInvalidArgument = 10003                /*!<  */
} AGSErrorCode;



/** Defines the drawing behavior for a dynamic layer when
 the map's gps is in a navigation mode.
 @since 2.1
 */
typedef enum {
	AGSDynamicLayerGPSAutoPanDrawingModeNormal = 0,	/*!< Dynamic layer draws normally. */
    AGSDynamicLayerGPSAutoPanDrawingModeConservative, /*!< Dynamic layer draws only when it doesn't currently have a drawing operation in progress. 
                                                       This lessens the load on the server.*/
    AGSDynamicLayerGPSAutoPanDrawingModeNone /*!< Dynamic layer does not draw when the map is in navigation mode. */
} AGSDynamicLayerGPSAutoPanDrawingMode;


/**
 @since 2.2
 */
typedef enum {
    AGSPortalItemTypeMapDocument = 0,               /*!< ArcMap Document (mxd) */
    AGSPortalItemTypeExplorerMap,                   /*!< ArcGIS Explorer Document (nmf) */
    AGSPortalItemTypeGlobeDocument,                 /*!< ArcGlobe Document (3dd) */
    AGSPortalItemTypeSceneDocument,                 /*!< ArcScene Document (sxd) */
    //AGSPortalItemTypeExplorerMap,                  /*!< ArcGIS Explorer Application Configuration (ncfg) */
    AGSPortalItemTypePublishedMap,                  /*!< ArcReader Document (pmf) */
    AGSPortalItemTypeMapPackage,                    /*!< ArcGIS Map Package (mpk)  */
    AGSPortalItemTypeGeoprocessingPackage,          /*!< ArcGIS Geoprocessing Package (gpk) */
    AGSPortalItemTypeLocatorPackage,                /*!< ArcGIS Locator Package (apk) */
    AGSPortalItemTypeTilePackage,                   /*!< ArcGIS Server Tile Package (tpk)*/
    AGSPortalItemTypeWindowsMobilePackage,          /*!< ArcGIS Windows Mobile Package */
    AGSPortalItemTypeDesktopApplicationTemplate,    /*!< The Desktop Application Template (.zip) includes either a desktop add in or a toolbar.exe */
    AGSPortalItemTypeMapTemplate,                   /*!< The Map Template (.zip) contains documentation, a map and GDB folder */
    AGSPortalItemTypeCodeSample,                    /*!< Developer Sample */
    AGSPortalItemTypeGeoprocessingSample,           /*!< Tool, Geoprocessing Sample */
    AGSPortalItemTypeLayer,                         /*!< Layer File (lyr) */
    AGSPortalItemTypeLayerPackage,                  /*!< Layer Package (lpk) */
    AGSPortalItemTypeExplorerLayer,                 /*!< ArcGIS Explorer Layer (nmc) */
    AGSPortalItemTypeDesktopAddIn,                  /*!< ArcGIS Add In (esriaddin) */
    AGSPortalItemTypeExplorerAddIn,                 /*!< ArcGIS Explorer Layer (eaz) */
    AGSPortalItemTypeMapService,                    /*!< ArcGIS Server Map Service */
    AGSPortalItemTypeGeocodingService,              /*!< ArcGIS Server Geocoding Service */
    AGSPortalItemTypeNetworkAnalysisService,        /*!< ArcGIS Server Network Analyst Service */
    AGSPortalItemTypeGlobeService,                  /*!< ArcGIS Server Globe Service */
    AGSPortalItemTypeGeoprocessingService,          /*!< ArcGIS Server Geoprocessing Service */
    AGSPortalItemTypeGeodataService,                /*!< ArcGIS Server Geodata Service */
    AGSPortalItemTypeImageService,                  /*!< ArcGIS Server Image Service */
    AGSPortalItemTypeGeometryService,               /*!< ArcGIS Server Geometry Service */
    AGSPortalItemTypeFeatureService,                /*!< ArcGIS Feature Service */
    AGSPortalItemTypeKML,                           /*!< Data, Map, kml */
    AGSPortalItemTypeWMS,                           /*!< Data, Service, Web Map Service, OGC */
    AGSPortalItemTypeWMTS,                          /*!< Data, Service, Web Map Tile Service, OGC */
    AGSPortalItemTypeWebMap,                        /*!< Web Map authored using the arcgis.com Javascript Web Map viewer or using ArcGIS Explorer online. Usable by web, mobile, and desktop clients */
    AGSPortalItemTypeWebMappingApplication,         /*!< A web mapping application built using ArcGIS API for Javascript, ArcGIS API for Flex, ArcGIS API for Silverlight, Java Web Application Developer Framework, .NET Web Application Developer Framework */
    AGSPortalItemTypeMobileApplication,             /*!< A mobile application build using the ArcGIS for iPhone SDK, ArcGIS for Android SDK, ArcGIS Mobile SDK for the Windows Mobile Platform, or the JavaScript or Flex API */
    AGSPortalItemTypeCodeAttachment,                /*!< Code Attachment */
    AGSPortalItemTypeFeaturedItems,                 /*!< Empty Item type with relationships to items that user wants featured */
    AGSPortalItemTypeFeatureCollection,             /*!< A feature collection is a saved web map feature layer with layer definition and a feature set */
    AGSPortalItemTypeFeatureCollectionTemplate,     /*!< Feature Collection, Feature Service Template, Map Notes Template */
    AGSPortalItemTypeSymbolSet,                     /*!< Symbol Set*/
    AGSPortalItemTypeColorSet,                      /*!< Color Set */
    AGSPortalItemTypeCollectionDefinition,          /*!< The definition for a feature collection/web map feature layer */
    AGSPortalItemTypeOther                          /*!< */
} AGSPortalItemType;


/** Access types on Portal, Item, Group or User. 
 
 <b> For Portal or Organization </b>
 
 Determines who can view your organization as an anonymous user. <code>AGSPortalAccessPublic</code> 
 means it allows anonymous users to access your organization's custom URL. <code>AGSPortalAccessPrivate </code> restricts access to only members of your organization.  
 
 <b> For Portal Item </b>
 
 Indicates the access level of the item. If <code>AGSPortalAccessPrivate</code>, only the item owner can
 access. <code>AGSPortalAccessShared</code> allows the item to be shared with a specific group. <code>
 AGSPortalAccessOrganization</code> restricts item access to members of your organization. If <code>
 AGSPortalAccessPublic</code>, all users can access the item.
 
 <b> For Portal Group </b>
 
 Determines who can access the group. <code>AGSPortalAccessPrivate</code> gives access to only the group
 members. If <code>AGSPortalAccessOrganization</code>, all members of this organization can access the
 group. <code>AGSPortalAccessPublic</code> makes the group accessible to all.
 
 <b> For Portal User </b>
 
 Determines if other users can search for this user's name to find content and groups owned by this user
 and to invite this user to join their groups. <code>AGSPortalAccessPrivate</code> hides the user from
 user searches and invites. If <code>AGSPortalAccessOrganization</code>, only members of this user's 
 organization can search for this user, the content and groups. <code>AGSPortalAccessPublic</code> makes 
 the user findable.
 
 @since 2.2
 */
typedef enum { 
    AGSPortalAccessPrivate = 0,                     /*!< Applicable for All  */
    AGSPortalAccessShared,                          /*!< Applicable for only Items  */
    
    AGSPortalAccessOrganization,                    /*!< Applicable for Items, Groups and Users  */
    
    AGSPortalAccessPublic                           /*!< Applicable for All  */
    
} AGSPortalAccess;

extern AGSPortalAccess AGSPortalAccessForString(NSString *accessString);

/** Indicates the oder of results of the portal query.  
 @since 2.2
 */
typedef enum{
	AGSPortalQuerySortOrderAscending = 0,   	/*!<  */
	AGSPortalQuerySortOrderDescending,			/*!<  */
} AGSPortalQuerySortOrder;


/** Indicating whether the portal contains multiple organizations or not. 
 @since 2.2
 */
typedef enum {
	AGSPortalModeSingleTenant = 0,   	/*!< Only one organization*/
	AGSPortalModeMultiTenant,			/*!< Multiple organizations*/
} AGSPortalMode;


/**
 @since 2.3
 */
typedef enum {
    AGSWMTSServiceModeRESTful = 0,              /*!<  */
    AGSWMTSServiceModeKVP                       /*!<  */
} AGSWMTSServiceMode;


/** Supported image formats.
 @since 1.0
 */
typedef enum {
    AGSImageFormatPNG32 = 0,	/*!<  */
    AGSImageFormatPNG24,		/*!<  */
    AGSImageFormatPNG8,			/*!<  */
    AGSImageFormatPNG,			/*!<  */
    AGSImageFormatJPG,			/*!<  */
    AGSImageFormatGIF,			/*!<  */
	AGSImageFormatBMP,			/*!<  */
	AGSImageFormatTIFF,			/*!<  */
	AGSImageFormatJPGPNG		/*!<  */
} AGSImageFormat;

/** Returns the image format as a string.
 @since 1.0
 */
extern NSString *AGSFileFormatForImageFormat(AGSImageFormat imageFormat);
